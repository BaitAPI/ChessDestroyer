<!DOCTYPE HTML>
<html lang="de">
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Game | ChessDestroyer</title>
        <link rel="stylesheet" href="css/main.css">
        <link rel="stylesheet" href="css/game.css">

        <!-- add Chessboard stylesheet via CDN: -->
        <link rel="stylesheet"
              href="https://unpkg.com/@chrisoakman/chessboard2@0.5.0/dist/chessboard2.min.css"
              integrity="sha384-47VeTDpmy4yT21gKPXQcLQYQZwlmz27gEH5NTrOmTk3G/SGvMyltclOW/Q8uE+sL"
              crossorigin="anonymous">
    </head>
    <body>
        <div class="center">
            <div class="center-middle">
                <div class="center-inner grid-container">
                    <div id="board"></div>
                    <div id="opponent" class="players">
                        <h3>Opponent Name</h3>
                        <p> <span>St√§rke:</span> {{difficulty}}</p>
                    </div>

                    <div id="player" class="players">
                        <h3>{{username}}</h3>

                    </div>
                </div>
            </div>
        </div>

        <div id="game-over-container">
            <div class="center">
                <div class="center-middle">
                    <div class="game-over-content">
                        <h1>Game Over</h1>
                        <h2 id="over-description">placeholder for nu checker</h2>
                    </div>

                </div>
            </div>
        </div>

        <input id="hidden-color" type="hidden" value="{{color}}">


        <!-- add Chessboard JS via CDN: -->
        <script src="https://unpkg.com/@chrisoakman/chessboard2@0.5.0/dist/chessboard2.min.js"
                integrity="sha384-/KwQCjA1GWovZNV3QDVtvSMDzO4reGgarF/RqHipr7hIUElH3r5zNl9WEPPOBRIF"
                crossorigin="anonymous">
        </script>

        <!-- add Chess JS via CDN: -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.js" integrity="sha512-oprzqYFJfo4Bx/nNEcSI0xo7ggJrLc+qQ6hrS3zV/Jn0C4dsg4gu+FXW/Vm0jP9CrV7e5e6dcLUYkg3imjfjbw==" crossorigin="anonymous" referrerpolicy="no-referrer">
        </script>

        <script>
            let cheatMode = false

            const getParams = new URLSearchParams(window.location.search)

            let playerColorShort = document.getElementById("hidden-color").value;
            let playerColor = ((playerColorShort === "w")? "white" : "black");

            const game = new Chess();

            const config = {
                draggable: true,
                dropOffBoard: 'snapback',
                moveSpeed: 'slow',
                snapbackSpeed: 'slow',
                snapSpeed: 'slow',
                orientation: playerColor,
                position: game.fen(),
                onDragStart,
                onDrop,
            }

            const board = Chessboard2('board', config);

            let pieceRegex = new RegExp(`^${playerColorShort}`);

            function isPiecePlayerColor (piece) { return pieceRegex.test(piece) }

            function onDragStart (dragStartEvt) {
                if (game.turn() !== playerColorShort || !isPiecePlayerColor(dragStartEvt.piece)) return false

                const legalMoves = game.moves({
                    square: dragStartEvt.square,
                    verbose: true
                })

                legalMoves.forEach((move) => {
                    board.addCircle(move.to)
                })
            }

            function onDrop (dropEvt) {
                const move = game.move({
                    from: dropEvt.source,
                    to: dropEvt.target,
                    promotion: 'q' //TODO: change behavior for production -> at the moment always promote to a queen for simplicity
                })


                board.clearCircles();

                // Only move if legal
                if (!move) {
                    return 'snapback'
                }

                board.position(game.fen());

                opponentMove(dropEvt.source, dropEvt.target);
                checkGameOver();
            }

            async function fetchBoard(src, dest) {
                const response = await fetch("/move", {
                    method: "POST",
                    cache: "no-cache",
                    headers: {
                        "Content-Type": "text/plain"
                    },
                    body: src+dest
                })
                return await response.text()
            }

            async function opponentMove(src, dest) {
                if (game.turn() === playerColorShort) return;

                const fen = await fetchBoard(src, dest)
                try {
                    game.load(fen)
                    board.position(game.fen())
                } catch (e) {
                    console.log(e)
                }

                await checkGameOver();
                if (cheatMode) {await cheat()}
            }

            const overContainer = document.getElementById('game-over-container');

            async function checkGameOver() {
                if (game.game_over()) {
                    const response = await fetch('/game_end')
                    if (response.ok) {

                        let overText = '';

                        let moveColor = 'Weiss';
                        if (game.turn() === 'b') {
                            moveColor = 'Schwarz';
                        }

                        if (game.in_checkmate()) {
                            overText = moveColor + ' ist Schachmatt';
                        }

                        if (game.in_draw()) {
                            overText = 'Unentschieden';
                        }

                        const overDescription = document.getElementById('over-description');
                        overDescription.innerText = overText;

                        overContainer.style.display = "block";

                        return;
                    } else if (response.status === 406) {
                        const fen = await response.text()
                        game.load(fen)
                        board.position(game.fen())
                    } else {
                        console.log('ERROR: Unexpected Status while fetching game over: ' + response.status)
                    }
                }
                highlightTurn()
            }

            const playerId = document.getElementById("player")
            const opponentId = document.getElementById("opponent")

            var squareClass = 'square-55d63'

            function highlightTurn() {
                if (game.turn() === playerColorShort) {
                    playerId.style.opacity = '100%';
                    opponentId.style.opacity = '50%';
                } else {
                    playerId.style.opacity = '50%';
                    opponentId.style.opacity = '100%';
                }

                if (game.in_check()) {
                    const kingCords = [].concat(...game.board()).map((p, index) => {
                        if (p !== null && p.type === game.KING && p.color === game.turn()) {
                            return index
                        }
                    }).filter(Number.isInteger).map((piece_index) => {
                        const row = 'abcdefgh'[piece_index % 8]
                        const column = Math.ceil((64 - piece_index) / 8)
                        return row + column
                    })

                    const chessSquare = document.querySelector(`div[data-square-coord="${kingCords}"]`);
                    chessSquare.classList.add("highlight-in-chess");

                } else {
                    const highlight = document.getElementsByClassName("highlight-in-chess")[0];
                    if (typeof highlight === 'undefined' || highlight === null)
                        return;

                    highlight.classList.remove("highlight-in-chess");
                }
            }

            function firstMove() {
                highlightTurn()
                if (playerColorShort === "b") {
                    opponentMove("0", "0")
                } else if (cheatMode) {
                    cheat()
                }
            }

            firstMove()

            async function cheat() {
                if (game.game_over()) {return}

                const response = await (await fetch("https://chess-api.com/v1", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({fen: game.fen()}),
                })).json()

                game.move(response['san'])
                board.position(game.fen())

                await opponentMove(response['move'], "");
                await checkGameOver();
            }
        </script>
    </body>
</html>
